{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nlet DropupdateComponent = class DropupdateComponent {\n  constructor(tokenStorageService, fb, listService, route, router) {\n    this.tokenStorageService = tokenStorageService;\n    this.fb = fb;\n    this.listService = listService;\n    this.route = route;\n    this.router = router;\n    this.roles = [];\n    this.isLoggedIn = false;\n    this.submitted = false;\n    this.isCollapsed = false;\n  }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n      this.username = user.username;\n    }\n\n    this.list_id = this.route.snapshot.paramMap.get('listId'); //  --------------------- LIST CREATION ------------------------   //\n\n    this.newList = this.fb.group({\n      listTitle: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(60)]],\n      id: '',\n      chapters: ['', [Validators.maxLength(25)]],\n      sublist: this.fb.array([])\n    });\n    this.addSublist();\n    this.addItem(0);\n    this.addItem(0);\n    this.addItem(0);\n    this.prefillList();\n  } //  --------------------- SUBLIST CREATION ---------------------   //\n\n\n  get sublistArray() {\n    return this.newList.get('sublist');\n  }\n\n  addSublist() {\n    const sublistGroup = this.fb.group({\n      subListCreator: this.username,\n      subListHidden: false,\n      item: this.fb.array([])\n    });\n    this.sublistArray.push(sublistGroup);\n  }\n\n  deleteSublist(i) {\n    this.sublistArray.removeAt(i);\n  } //  ---------------------- ITEM CREATION ------------------------   //\n\n\n  getItemArray(index) {\n    return this.sublistArray.get([index, 'item']);\n  }\n\n  addItem(index) {\n    const itemGroup = this.fb.group({\n      itemTitle: ['', [Validators.required, Validators.maxLength(100)]],\n      itemContext: []\n    });\n    this.getItemArray(index).push(itemGroup);\n  }\n\n  deleteItem(userIndex, colorIndex) {\n    this.getItemArray(userIndex).removeAt(colorIndex);\n  } //  -------- SHOW COMMENTS + SET PUBLIC / PRIVATE -------   //\n\n\n  showComments() {\n    this.isCollapsed = !this.isCollapsed;\n  }\n\n  setPrivate() {\n    console.log(\"setPrivate\");\n    this.sublistArray.controls[0].patchValue({\n      'subListHidden': true\n    });\n  }\n\n  setPublic() {\n    console.log(\"setPublic\");\n    this.sublistArray.controls[0].patchValue({\n      'subListHidden': false\n    });\n  } //  ---------------------- SWAP PLACES ------------------------   //\n\n\n  getOnTop() {\n    const extrasFormArray = this.getItemArray(0);\n    this.templist = extrasFormArray.value;\n    let last = this.templist.pop();\n    this.templist.unshift(last);\n    this.getItemArray(0).setValue(this.templist);\n  }\n\n  moveUp(index) {\n    if (index > 0) {\n      const extrasFormArray = this.getItemArray(0);\n      const extras = extrasFormArray.value;\n      const newExtras = this.swap(extras, index - 1, index);\n      this.getItemArray(0).setValue(newExtras);\n    }\n  }\n\n  moveDown(index) {\n    const extrasFormArray = this.getItemArray(0);\n    const extras = extrasFormArray.value;\n\n    if (index < extras.length - 1) {\n      const newExtras = this.swap(extras, index, index + 1);\n      extrasFormArray.setValue(newExtras);\n    }\n  }\n\n  swap(arr, index1, index2) {\n    arr = [...arr];\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n    return arr;\n  } //  -------------- GET LIST TITLE FROM URL ------------------   //\n\n\n  prefillList() {\n    const listId = this.route.snapshot.paramMap.get('listId');\n    this.listService.getListNo404(listId).subscribe(list => {\n      this.list = list; //  maak sublist om hierna te kunnen checken op user-match // \n\n      const sublist = this.list.sublist; // maak een result op basis van de user match //\n\n      const result = sublist.filter(({\n        subListCreator\n      }) => subListCreator.includes(this.username)); // als de user match er is, dan redirecten naar het edit component zodat je niet per ongeluk je bestaande lijst overschrijft\n\n      if (result.length) {\n        this.router.navigateByUrl(this.router.parseUrl('/edit/' + listId));\n      }\n\n      this.newList.patchValue({\n        listTitle: this.list.listTitle,\n        id: this.route.snapshot.paramMap.get('listId')\n      });\n      this.startup = true;\n    }); //  this.listService.getShortlist(listId)\n    //  .subscribe(list => \n    //    {this.list = list;\n    //     console.log(this.list);\n    //     const allsubLists = this.list.shortlistItem.map(itemTitle => itemTitle);\n    //     this.options = allsubLists.map((listEl) => listEl.itemTitle);\n    //     console.log(\"de lijst-item-opties zijn: \" + this.options);          \n    //    });\n\n    this.listService.getShortlist(listId).subscribe(list => {\n      this.list = list;\n      console.log(this.list);\n      const filteredShortlistItems = this.list.shortlistItem.filter(item => {\n        // Filter out items that have comments created by the specific username\n        const commentsCreatedByUser = item.itemComment.filter(comment => {\n          return comment.itemCommentCreator === this.username;\n        });\n        return commentsCreatedByUser.length === 0;\n      });\n      const allsubLists = filteredShortlistItems.map(itemTitle => itemTitle);\n      this.options = allsubLists.map(listEl => listEl.itemTitle); // console.log(\"de lijst-item-opties zijn: \" + this.options);                      \n    });\n  } //  ----- REMOVE SELECTION FROM TYPEAHEAD OPTIONS -----   //\n\n\n  onSelectItem(event) {\n    this.options = this.options.filter(obj => {\n      return obj !== event.item;\n    });\n  } //  ---------------------- SUBMISSION! ------------------------   //\n\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.newList.invalid) {\n      return;\n    }\n\n    this.isBusy = true;\n    this.listService.updateList(this.newList.value).subscribe(list => {\n      console.log(list);\n      const listId = this.route.snapshot.paramMap.get('listId');\n      this.router.navigate(['lists/', listId], {\n        skipLocationChange: true\n      });\n    });\n  }\n\n};\n\n__decorate([Input()], DropupdateComponent.prototype, \"list\", void 0);\n\nDropupdateComponent = __decorate([Component({\n  template: '',\n  selector: 'app-dropupdate',\n  templateUrl: './dropupdate.component.html',\n  styleUrls: ['./dropupdate.component.css']\n})], DropupdateComponent);\nexport { DropupdateComponent };","map":null,"metadata":{},"sourceType":"module"}