{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { Observable, map, of, switchMap } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nlet DropComponent = class DropComponent {\n  constructor(tokenStorageService, fb, listService, route, router, location) {\n    this.tokenStorageService = tokenStorageService;\n    this.fb = fb;\n    this.listService = listService;\n    this.route = route;\n    this.router = router;\n    this.location = location;\n    this.roles = [];\n    this.isLoggedIn = false;\n    this.submitted = false;\n    this.isCollapsed = false;\n  }\n\n  onSelect(event) {\n    this.selectedList = event.item;\n    console.log(this.selectedList);\n    console.log(this.lists$);\n    this.lists$.subscribe(list => {\n      this.list = list;\n      console.log(this.list);\n      const allsubLists = this.list[0].shortlist;\n      console.log(allsubLists);\n      this.options = allsubLists.map(listEl => listEl.itemTitle);\n      console.log(\"de lijst-item-opties zijn: \" + this.options);\n    });\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n  ngOnInit() {\n    this.lists$ = new Observable(observer => {\n      observer.next(this.search);\n    }).pipe(debounceTime(300), distinctUntilChanged(), switchMap(query => {\n      if (query) {\n        return this.listService.searchLists(query); // .pipe(\n        //   map((listEl) => listEl.map( (listEl) => listEl.listTitle)) )\n      }\n\n      return of([]);\n    }));\n    this.suggestions$ = this.lists$.pipe(map(listEl => listEl.map(listEl => listEl.listTitle))), this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles; // this.showModeratorBoard = this.roles.includes('ROLE_MODERATOR');\n\n      this.username = user.username;\n    } //  --------------------- LIST CREATION ------------------------   //\n\n\n    this.newList = this.fb.group({\n      listTitle: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(60)]],\n      chapters: ['', [Validators.maxLength(25)]],\n      sublist: this.fb.array([])\n    });\n    this.addSublist();\n    this.addItem(0);\n    this.addItem(0);\n    this.addItem(0);\n  } //  --------------------- SUBLIST CREATION ---------------------   //\n\n\n  get sublistArray() {\n    return this.newList.get('sublist');\n  }\n\n  addSublist() {\n    const sublistGroup = this.fb.group({\n      subListCreator: this.username,\n      subListHidden: false,\n      item: this.fb.array([])\n    });\n    this.sublistArray.push(sublistGroup);\n  }\n\n  deleteSublist(i) {\n    this.sublistArray.removeAt(i);\n  } //  ---------------------- ITEM CREATION ------------------------   //\n\n\n  getItemArray(index) {\n    return this.sublistArray.get([index, 'item']);\n  }\n\n  addItem(index) {\n    const itemGroup = this.fb.group({\n      itemTitle: ['', [Validators.required, Validators.maxLength(100)]],\n      itemContext: []\n    });\n    this.getItemArray(index).push(itemGroup);\n  }\n\n  deleteItem(userIndex, colorIndex) {\n    this.getItemArray(userIndex).removeAt(colorIndex);\n  } //  -------- SHOW COMMENTS + SET PUBLIC / PRIVATE -------   //\n\n\n  showComments() {\n    this.isCollapsed = !this.isCollapsed;\n  }\n\n  setPrivate() {\n    console.log(\"setPrivate\");\n    this.sublistArray.controls[0].patchValue({\n      'subListHidden': true\n    });\n  }\n\n  setPublic() {\n    console.log(\"setPublic\");\n    this.sublistArray.controls[0].patchValue({\n      'subListHidden': false\n    });\n  } //  ---------------------- SWAP PLACES ------------------------   //\n\n\n  getOnTop() {\n    const extrasFormArray = this.getItemArray(0);\n    this.templist = extrasFormArray.value;\n    let last = this.templist.pop();\n    this.templist.unshift(last);\n    this.getItemArray(0).setValue(this.templist);\n  }\n\n  moveUp(index) {\n    if (index > 0) {\n      const extrasFormArray = this.getItemArray(0);\n      const extras = extrasFormArray.value;\n      const newExtras = this.swap(extras, index - 1, index);\n      this.getItemArray(0).setValue(newExtras);\n    }\n  }\n\n  moveDown(index) {\n    const extrasFormArray = this.getItemArray(0);\n    const extras = extrasFormArray.value;\n\n    if (index < extras.length - 1) {\n      const newExtras = this.swap(extras, index, index + 1);\n      extrasFormArray.setValue(newExtras);\n    }\n  }\n\n  swap(arr, index1, index2) {\n    arr = [...arr];\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n    return arr;\n  } //  ----- REMOVE SELECTION FROM TYPEAHEAD OPTIONS -----   //\n\n\n  onSelectItem(event) {\n    this.options = this.options.filter(obj => {\n      return obj !== event.item;\n    });\n  } //  ---------------------- SUBMISSION! ------------------------   //\n\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.newList.invalid) {\n      return;\n    }\n\n    this.isBusy = true;\n    this.listService.dropList(this.newList.value).subscribe(list => {\n      console.log(list);\n      this.id = list._id;\n      this.id = this.id.$oid;\n      console.log(this.id);\n      this.router.navigate(['lists/', this.id], {\n        skipLocationChange: true\n      });\n      this.isBusy = false;\n    });\n  }\n\n};\n\n__decorate([Input()], DropComponent.prototype, \"list\", void 0);\n\nDropComponent = __decorate([Component({\n  selector: 'app-drop',\n  templateUrl: './drop.component.html',\n  styleUrls: ['./drop.component.css']\n})], DropComponent);\nexport { DropComponent };","map":null,"metadata":{},"sourceType":"module"}