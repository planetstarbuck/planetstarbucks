{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { PushNotifications } from '@capacitor/push-notifications';\nimport { Capacitor } from '@capacitor/core';\nimport { SavePassword } from 'capacitor-ios-autofill-save-password';\nimport { Validators } from \"@angular/forms\";\nlet LoginComponent = class LoginComponent {\n  constructor(authService, tokenStorage, router, route, fb) {\n    this.authService = authService;\n    this.tokenStorage = tokenStorage;\n    this.router = router;\n    this.route = route;\n    this.fb = fb;\n    this.isLoggedIn = false;\n    this.isLoginFailed = false;\n    this.errorMessage = '';\n    this.username = '';\n    this.isBusy = false;\n    this.submitted = false;\n  }\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.username = this.tokenStorage.getUser().username;\n    }\n\n    this.returnUrl = this.tokenStorage.redirectUrl;\n    this.loginform = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  LogOn(username, password, tokenvalue) {\n    this.authService.login(username, password, tokenvalue).subscribe(data => {\n      this.tokenStorage.saveToken(data.accessToken);\n      this.tokenStorage.saveUser(data);\n      this.isLoginFailed = false;\n      this.isLoggedIn = true;\n      this.username = this.tokenStorage.getUser().username;\n\n      if (Capacitor.getPlatform() === 'ios') {\n        SavePassword.promptDialog({\n          username: username,\n          password: password\n        }).then(() => console.log('promptDialog success')).catch(err => console.error('promptDialog failure', err));\n      }\n\n      this.isBusy = false;\n      this.router.navigateByUrl(this.returnUrl).then(() => {\n        window.location.reload();\n      }); // this.reloadPage();\n    }, err => {\n      this.errorMessage = err.error.message;\n      console.log(\"er is een error\" + this.errorMessage);\n      this.isLoginFailed = true;\n      this.isBusy = false;\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.loginform.invalid) {\n      return;\n    }\n\n    this.isBusy = true;\n    const username = this.loginform.controls['username'].value;\n    const password = this.loginform.controls['password'].value;\n    this.tokenvalue = '';\n    const isPushNotificationsAvailable = Capacitor.isPluginAvailable('PushNotifications');\n\n    if (isPushNotificationsAvailable) {\n      PushNotifications.requestPermissions().then(result => {\n        if (result.receive === 'granted') {\n          // Register with Apple / Google to receive push via APNS/FCM\n          PushNotifications.register();\n        } else {\n          this.LogOn(username, password, this.tokenvalue);\n        }\n      });\n      PushNotifications.addListener('registration', token => {\n        console.log('Push registration success, token: ' + token.value);\n        this.tokenvalue = token.value;\n        this.LogOn(username, password, this.tokenvalue);\n      });\n    } else {\n      this.LogOn(username, password, this.tokenvalue);\n    }\n  }\n\n  onSubmitNotInUse() {\n    this.submitted = true;\n\n    if (this.loginform.invalid) {\n      return;\n    }\n\n    this.isBusy = true;\n    const username = this.loginform.controls['username'].value;\n    const password = this.loginform.controls['password'].value; // UNCOMMENT IN CASE OF TESTING XCODE TESTING\n    //  this.tokenvalue = \"\"\n    //  this.LogOn(username, password, this.tokenvalue)\n    // COMMENT IN CASE OF TESTING XCODE TESTING\n\n    const isPushNotificationsAvailable = Capacitor.isPluginAvailable('PushNotifications');\n\n    if (isPushNotificationsAvailable) {\n      PushNotifications.requestPermissions().then(result => {\n        if (result.receive === 'granted') {\n          // Register with Apple / Google to receive push via APNS/FCM\n          PushNotifications.register();\n        } else {\n          this.tokenvalue = \"\";\n          this.LogOn(username, password, this.tokenvalue);\n        }\n      });\n      PushNotifications.addListener('registration', token => {\n        console.log('Push registration success, token: ' + token.value);\n        this.tokenvalue = token.value;\n        this.LogOn(username, password, this.tokenvalue);\n      });\n    } else {\n      this.tokenvalue = \"\";\n      this.LogOn(username, password, this.tokenvalue);\n    } // END OF COMMENT IN CASE OF TESTING XCODE TESTING\n\n\n    console.log('Push notification token vlak na logOn call: ' + this.tokenvalue);\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module"}