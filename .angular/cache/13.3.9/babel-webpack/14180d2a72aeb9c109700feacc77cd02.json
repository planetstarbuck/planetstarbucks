{"ast":null,"code":"import { BehaviorSubject, forkJoin, fromEvent } from \"rxjs\";\nimport { map, take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../list.service\";\nimport * as i3 from \"../token-storage.service\";\nimport * as i4 from \"../feed-shell/feed-shell.component\"; // import { debounceTime } from 'rxjs/operators';\n\nexport let FeedComponent = /*#__PURE__*/(() => {\n  class FeedComponent {\n    constructor(route, listService, tokenStorageService) {\n      this.route = route;\n      this.listService = listService;\n      this.tokenStorageService = tokenStorageService;\n      this.roles = '';\n      this.isLoggedIn = false;\n      this.isFollowedCollapsed = [];\n      this.isUnfollowedCollapsed = [];\n      this.currentPage = 0;\n      this.pageSize = 10;\n      this.listArray = new BehaviorSubject([]);\n      this.lists$ = this.listArray.asObservable();\n      this.lists = [];\n    }\n\n    addToSaved(saved_id) {\n      this.listService.addSaved(this.username, saved_id);\n      this.tokenStorageService.addSavedList(saved_id);\n      this.saved_lists = this.tokenStorageService.getSavedList();\n    }\n\n    removeFromSaved(saved_id) {\n      const user = this.tokenStorageService.getUser();\n      const username = user.username;\n      this.listService.removeSaved(username, saved_id);\n      this.tokenStorageService.removeSavedList(saved_id);\n      this.saved_lists = this.tokenStorageService.getSavedList();\n    }\n\n    getLists() {\n      this.listService.getLists(this.currentPage, this.pageSize).subscribe(data => {\n        this.listArray.next(data);\n        this.startup = true;\n      });\n      const content = document.querySelector('.lists');\n      const scroll$ = fromEvent(content, 'scroll').pipe(map(() => {\n        return content.scrollTop;\n      }));\n      scroll$.subscribe(scrollPos => {\n        let limit = content.scrollHeight - content.clientHeight;\n\n        if (scrollPos > limit) {\n          this.loading = true;\n          this.currentPage += this.pageSize;\n          forkJoin([this.lists$.pipe(take(1)), this.listService.getLists(this.currentPage, this.pageSize)]).subscribe(data => {\n            const newArr = [...data[0], ...data[1]];\n            this.listArray.next(newArr);\n            this.loading = false;\n          });\n        }\n      });\n    } // lists =>  this.lists = lists\n\n\n    ngOnInit() {\n      this.getLists();\n      this.isLoggedIn = !!this.tokenStorageService.getToken(); // dit is handig om bij SAVE enzo weer op dezelfde page uit te komen na inloggen\n\n      this.tokenStorageService.redirectUrl = this.route.snapshot['_routerState'].url;\n\n      if (this.isLoggedIn) {\n        const user = this.tokenStorageService.getUser();\n        this.roles = user.roles;\n        this.username = user.username;\n        this.saved_lists = this.tokenStorageService.getSavedList();\n        console.log(this.saved_lists);\n      }\n    }\n\n  }\n\n  FeedComponent.ɵfac = function FeedComponent_Factory(t) {\n    return new (t || FeedComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ListService), i0.ɵɵdirectiveInject(i3.TokenStorageService));\n  };\n\n  FeedComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FeedComponent,\n    selectors: [[\"app-feed\"]],\n    decls: 1,\n    vars: 8,\n    consts: [[3, \"lists\", \"lists$\", \"startup\", \"isLoggedIn\", \"saved_lists\", \"isFollowedCollapsed\", \"isUnfollowedCollapsed\", \"unSaveEvent\", \"saveEvent\"]],\n    template: function FeedComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-feed-shell\", 0);\n        i0.ɵɵlistener(\"unSaveEvent\", function FeedComponent_Template_app_feed_shell_unSaveEvent_0_listener($event) {\n          return ctx.removeFromSaved($event);\n        })(\"saveEvent\", function FeedComponent_Template_app_feed_shell_saveEvent_0_listener($event) {\n          return ctx.addToSaved($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"lists\", ctx.lists)(\"lists$\", ctx.lists$)(\"startup\", ctx.startup)(\"isLoggedIn\", ctx.isLoggedIn)(\"saved_lists\", ctx.saved_lists)(\"isFollowedCollapsed\", ctx.isFollowedCollapsed)(\"isUnfollowedCollapsed\", ctx.isUnfollowedCollapsed)(\"lists\", ctx.lists);\n      }\n    },\n    directives: [i4.FeedShellComponent],\n    styles: [\"body[_ngcontent-%COMP%]{margin:0;min-height:100%;height:100%;width:100%;background-color:#fff}.lists[_ngcontent-%COMP%]{position:absolute;margin-left:0;margin-right:0;left:0;right:0;height:88%;width:100%;overflow:scroll;padding-bottom:100px;background-color:#fff}.text-gray[_ngcontent-%COMP%]{color:#adb5bd}.scrollbar-hidden[_ngcontent-%COMP%]::-webkit-scrollbar{display:none}.scrollbar-hidden[_ngcontent-%COMP%]{-ms-overflow-style:none;scrollbar-width:none}\"]\n  });\n  return FeedComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}