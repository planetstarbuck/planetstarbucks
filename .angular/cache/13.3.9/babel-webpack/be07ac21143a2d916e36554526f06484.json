{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap, tap, startWith } from 'rxjs/operators';\nlet SearchComponent = class SearchComponent {\n  constructor(listService, route, tokenStorageService, router) {\n    this.listService = listService;\n    this.route = route;\n    this.tokenStorageService = tokenStorageService;\n    this.router = router;\n    this.roles = '';\n    this.isLoggedIn = false;\n    this.loading = false;\n    this.term = '';\n    this.searchTerms = new Subject();\n  } // Push a search term into the observable stream.\n\n\n  search(term) {\n    this.searchTerms.next(term);\n  }\n\n  addToSaved(saved_id) {\n    this.listService.addSaved(this.username, saved_id);\n    this.tokenStorageService.addSavedList(saved_id);\n    this.saved_lists = this.tokenStorageService.getSavedList();\n  }\n\n  removeFromSaved(saved_id) {\n    const user = this.tokenStorageService.getUser();\n    const username = user.username;\n    this.listService.removeSaved(username, saved_id);\n    this.tokenStorageService.removeSavedList(saved_id);\n    this.saved_lists = this.tokenStorageService.getSavedList();\n  }\n\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      console.log(params); // { searchterm: \"popular\" }\n\n      if (params) {\n        this.term = params.searchterm;\n      }\n\n      if (params.searchterm === undefined) {\n        this.term = '';\n      }\n\n      console.log(this.term); // popular\n    }); // dit is handig om bij SAVE enzo weer op dezelfde page uit te komen na inloggen\n\n    this.tokenStorageService.redirectUrl = this.route.snapshot['_routerState'].url;\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n      this.username = user.username;\n      this.saved_lists = this.tokenStorageService.getSavedList();\n    }\n\n    this.lists$ = this.searchTerms.pipe( // wait 300ms after each keystroke before considering the term\n    startWith(this.term), debounceTime(300), // ignore new term if same as previous term\n    distinctUntilChanged(), tap(() => this.loading = true), // switch to new search observable each time the term changes\n    switchMap(term => this.listService.searchLists(term)), tap(() => (this.loading = false, this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: {\n        searchterm: this.term\n      } // preserve the existing query params in the route\n      // do not trigger navigation\n\n    }))));\n  }\n\n};\nSearchComponent = __decorate([Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})], SearchComponent);\nexport { SearchComponent };","map":null,"metadata":{},"sourceType":"module"}