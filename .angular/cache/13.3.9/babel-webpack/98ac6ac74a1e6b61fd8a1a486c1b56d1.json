{"ast":null,"code":"import _asyncToGenerator from \"/Users/janwilbertluth/Documents/JWL sites/listdropper angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, forkJoin, fromEvent } from \"rxjs\";\nimport { map, take } from \"rxjs/operators\"; // import { debounceTime } from 'rxjs/operators';\n\nlet FeedComponent = class FeedComponent {\n  constructor(route, listService, tokenStorageService) {\n    this.route = route;\n    this.listService = listService;\n    this.tokenStorageService = tokenStorageService;\n    this.roles = '';\n    this.isLoggedIn = false;\n    this.isFollowedCollapsed = [];\n    this.isUnfollowedCollapsed = [];\n    this.currentPage = 0;\n    this.pageSize = 10;\n    this.listArray = new BehaviorSubject([]);\n    this.lists$ = this.listArray.asObservable();\n    this.lists = [];\n  }\n\n  handleRefresh(event) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Perform data loading or fetching operations here\n      _this.getLists(); // Call complete() on the event to signal that the refresh is complete\n\n\n      event.target.complete();\n    })();\n  }\n\n  addToSaved(saved_id) {\n    this.listService.addSaved(this.username, saved_id);\n    this.tokenStorageService.addSavedList(saved_id);\n    this.saved_lists = this.tokenStorageService.getSavedList();\n  }\n\n  removeFromSaved(saved_id) {\n    const user = this.tokenStorageService.getUser();\n    const username = user.username;\n    this.listService.removeSaved(username, saved_id);\n    this.tokenStorageService.removeSavedList(saved_id);\n    this.saved_lists = this.tokenStorageService.getSavedList();\n  }\n\n  getLists() {\n    this.listService.getLists(this.currentPage, this.pageSize).subscribe(data => {\n      this.listArray.next(data);\n      this.startup = true;\n    });\n    const content = document.querySelector('.lists');\n    const scroll$ = fromEvent(content, 'scroll').pipe(map(() => {\n      return content.scrollTop;\n    }));\n    scroll$.subscribe(scrollPos => {\n      let limit = content.scrollHeight - content.clientHeight;\n\n      if (scrollPos > limit) {\n        this.loading = true;\n        this.currentPage += this.pageSize;\n        forkJoin([this.lists$.pipe(take(1)), this.listService.getLists(this.currentPage, this.pageSize)]).subscribe(data => {\n          const newArr = [...data[0], ...data[1]];\n          this.listArray.next(newArr);\n          this.loading = false;\n        });\n      }\n    });\n  } // lists =>  this.lists = lists\n\n\n  ngOnInit() {\n    this.getLists();\n    this.isLoggedIn = !!this.tokenStorageService.getToken(); // dit is handig om bij SAVE enzo weer op dezelfde page uit te komen na inloggen\n\n    this.tokenStorageService.redirectUrl = this.route.snapshot['_routerState'].url;\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n      this.username = user.username;\n      this.saved_lists = this.tokenStorageService.getSavedList();\n      console.log(this.saved_lists);\n    }\n  }\n\n};\nFeedComponent = __decorate([Component({\n  selector: 'app-feed',\n  templateUrl: './feed.component.html',\n  styleUrls: ['./feed.component.css']\n})], FeedComponent);\nexport { FeedComponent };","map":null,"metadata":{},"sourceType":"module"}