{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nlet EditComponent = class EditComponent {\n  constructor(tokenStorageService, fb, listService, route, router) {\n    this.tokenStorageService = tokenStorageService;\n    this.fb = fb;\n    this.listService = listService;\n    this.route = route;\n    this.router = router;\n    this.roles = [];\n    this.isLoggedIn = false;\n    this.is_busy = false;\n    this.submitted = false;\n    this.isCollapsed = false;\n  }\n\n  ngOnInit() {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if (this.isLoggedIn) {\n      const user = this.tokenStorageService.getUser();\n      this.roles = user.roles;\n      this.username = user.username;\n    }\n\n    this.list_id = this.route.snapshot.paramMap.get('listId'); //  --------------------- LIST CREATION ------------------------   //\n\n    this.newList = this.fb.group({\n      listTitle: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(60)]],\n      id: '',\n      chapters: ['', [Validators.maxLength(25)]],\n      sublist: this.fb.array([])\n    });\n    this.addSublist();\n    this.prefillList();\n  } //  --------------------- SUBLIST CREATION ---------------------   //\n\n\n  get sublistArray() {\n    return this.newList.get('sublist');\n  }\n\n  addSublist() {\n    const sublistGroup = this.fb.group({\n      subListCreator: this.username,\n      subListHidden: false,\n      item: this.fb.array([])\n    });\n    this.sublistArray.push(sublistGroup);\n  }\n\n  deleteSublist(i) {\n    this.sublistArray.removeAt(i);\n  } //  ---------------------- ITEM CREATION ------------------------   //\n\n\n  getItemArray(index) {\n    return this.sublistArray.get([index, 'item']);\n  }\n\n  addItem(index) {\n    const itemGroup = this.fb.group({\n      itemTitle: ['', [Validators.required, Validators.maxLength(100)]],\n      itemContext: [],\n      commentId: []\n    });\n    this.getItemArray(index).push(itemGroup);\n  }\n\n  deleteItem(userIndex, colorIndex) {\n    this.getItemArray(userIndex).removeAt(colorIndex);\n  } //  -------- SHOW COMMENTS + SET PUBLIC / PRIVATE -------   //\n\n\n  showComments() {\n    this.isCollapsed = !this.isCollapsed;\n  }\n\n  setPrivate() {\n    console.log(\"setPrivate\");\n    this.sublistArray.controls[0].patchValue({\n      'subListHidden': true\n    });\n  }\n\n  setPublic() {\n    console.log(\"setPublic\");\n    this.sublistArray.controls[0].patchValue({\n      'subListHidden': false\n    });\n  } //  ---------------------- SWAP PLACES ------------------------   //\n\n\n  getOnTop() {\n    const extrasFormArray = this.getItemArray(0);\n    this.templist = extrasFormArray.value;\n    let last = this.templist.pop();\n    this.templist.unshift(last);\n    this.getItemArray(0).setValue(this.templist);\n  }\n\n  moveUp(index) {\n    if (index > 0) {\n      const extrasFormArray = this.getItemArray(0);\n      const extras = extrasFormArray.value;\n      const newExtras = this.swap(extras, index - 1, index);\n      this.getItemArray(0).setValue(newExtras);\n    }\n  }\n\n  moveDown(index) {\n    const extrasFormArray = this.getItemArray(0);\n    const extras = extrasFormArray.value;\n\n    if (index < extras.length - 1) {\n      const newExtras = this.swap(extras, index, index + 1);\n      extrasFormArray.setValue(newExtras);\n    }\n  }\n\n  swap(arr, index1, index2) {\n    arr = [...arr];\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n    return arr;\n  } //  -------------- GET LIST TITLE FROM URL ------------------   //\n\n\n  prefillList() {\n    const listId = this.route.snapshot.paramMap.get('listId');\n    this.listService.getListNo404(listId).subscribe(list => {\n      this.list = list;\n      this.listcount = this.list.sublist.length; // this.listcount = allSublists.map((sublists) => sublists.length);\n\n      console.log(this.listcount);\n      const subList = this.list.sublist.filter(sublist => sublist.subListCreator.includes(this.username));\n      const itemList = subList.map(listEl => listEl.item);\n      this.currentlistoptions = itemList.map(itemData => itemData.map(value => value.itemTitle)); //  console.log(\"de eigen lijst-item-opties zijn: \" + this.currentlistoptions);                    \n\n      const listcount = itemList.map(items => items.length);\n      console.log(listcount);\n\n      for (var i = 0; i < listcount; i++) {\n        this.addItem(0);\n      }\n\n      this.newList.patchValue({\n        listTitle: this.list.listTitle,\n        id: this.route.snapshot.paramMap.get('listId'),\n        sublist: this.list.sublist.filter(sublist => sublist.subListCreator.includes(this.username))\n      });\n      this.startup = true;\n    });\n    this.listService.getShortlist(listId).subscribe(list => {\n      this.list = list;\n      console.log(this.list);\n      const filteredShortlistItems = this.list.shortlistItem.filter(item => {\n        // Filter out items that have comments created by the specific username\n        const commentsCreatedByUser = item.itemComment.filter(comment => {\n          return comment.itemCommentCreator === this.username;\n        });\n        return commentsCreatedByUser.length === 0;\n      });\n      const allsubLists = filteredShortlistItems.map(itemTitle => itemTitle);\n      this.options = allsubLists.map(listEl => listEl.itemTitle); // console.log(\"de lijst-item-opties zijn: \" + this.options);                      \n    });\n  } //  ----- REMOVE SELECTION FROM TYPEAHEAD OPTIONS -----   //\n\n\n  onSelectItem(event) {\n    this.options = this.options.filter(obj => {\n      return obj !== event.item;\n    });\n  } //  ---------------------- SUBMISSION! ------------------------   //\n\n\n  onSubmit() {\n    this.submitted = true;\n\n    if (this.newList.invalid) {\n      return;\n    }\n\n    this.is_busy = true;\n    this.listService.editList(this.newList.value).subscribe(list => {\n      const listId = this.route.snapshot.paramMap.get('listId');\n      this.router.navigate(['lists/', listId], {\n        skipLocationChange: true\n      });\n    });\n  }\n\n};\n\n__decorate([Input()], EditComponent.prototype, \"list\", void 0);\n\nEditComponent = __decorate([Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})], EditComponent);\nexport { EditComponent };","map":null,"metadata":{},"sourceType":"module"}