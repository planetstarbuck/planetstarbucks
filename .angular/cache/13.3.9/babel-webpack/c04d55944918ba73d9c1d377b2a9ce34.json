{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let ListService = /*#__PURE__*/(() => {\n  class ListService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService; // private urlStart = 'http://192.168.86.27:5050/' \n\n      this.urlStart = 'https://api.listdropper.com';\n      this.listUrl = this.urlStart + '/list/'; // URL to web api\n\n      this.CommentCountUrl = this.urlStart + '/listcommentcount/'; // URL to web api\n\n      this.CommentsByUserCountUrl = this.urlStart + '/commentsbyuser/'; // URL to web api\n\n      this.feedUrl = this.urlStart + '/feed/'; // URL to web api\n\n      this.savedListsUrl = this.urlStart + '/getsavedlists/'; // URL to web api\n\n      this.shortlistUrl = this.urlStart + '/shortlist/'; // URL to web api\n\n      this.updatelistUrl = this.urlStart + '/addsublist/'; // URL to web api\n\n      this.addSavedUrl = this.urlStart + '/addsaved/'; // URL to web api\n\n      this.removeSavedUrl = this.urlStart + '/removesaved/'; // URL to web api\n\n      this.followChapterUrl = this.urlStart + '/followchapter/'; // URL to web api\n\n      this.unfollowChapterUrl = this.urlStart + '/unfollowchapter/'; // URL to web api\n\n      this.getChaptersUrl = this.urlStart + '/getchapters/'; // URL to web api\n\n      this.chapterlistUrl = this.urlStart + '/chapter/'; // URL to web api\n\n      this.userlistUrl = this.urlStart + '/profile/'; // URL to web api\n\n      this.searchUrl = this.urlStart + '/search/'; // URL to web api\n\n      this.commentUrl = this.urlStart + '/comment/'; // URL to web api\n\n      this.emailConfirmUrl = this.urlStart + '/confirm_email/'; // URL to web api\n\n      this.emailResendUrl = this.urlStart + '/resend_email/'; // URL to web api\n\n      this.requestPasswordUrl = this.urlStart + '/request_password/'; // URL to web api\n\n      this.changePasswordUrl = this.urlStart + '/change_password/'; // URL to web api\n\n      this.notificationUrl = this.urlStart + '/notifications/'; // URL to web api\n\n      this.notificationCountUrl = this.urlStart + '/notification_count/'; // URL to web api\n\n      this.notificationChangeReadUrl = this.urlStart + '/notification/read/'; // URL to web api\n\n      this.notificationChangeUnreadUrl = this.urlStart + '/notification/unread/'; // URL to web api\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** GET notification-change from the server */\n\n\n    changeNotificationToRead(id) {\n      const url = `${this.notificationChangeReadUrl}${id}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('fetched lists')), catchError(this.handleError('getNotificationsByUser', [])));\n    }\n    /** GET notification-change from the server */\n\n\n    changeNotificationToUnread(id) {\n      const url = `${this.notificationChangeUnreadUrl}${id}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('fetched lists')), catchError(this.handleError('getNotificationsByUser', [])));\n    }\n    /** GET notification count from the server */\n\n\n    getNotificationCount(user) {\n      const url = `${this.notificationCountUrl}${user}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('fetched lists')), catchError(this.handleError('getNotificationCount')));\n    }\n    /** GET notifications from the server */\n\n\n    getNotifications(user) {\n      const url = `${this.notificationUrl}${user}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('fetched lists')), catchError(this.handleError('getNotificationsByUser', [])));\n    }\n    /** GET resendEmailValidation from the server */\n\n\n    resendEmailValidation(email) {\n      const url = `${this.emailResendUrl}${email}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('confirmation send')));\n    }\n    /** GET requestPasswordLink from the server */\n\n\n    requestPasswordLink(email) {\n      const url = `${this.requestPasswordUrl}${email}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('confirmation send')));\n    }\n\n    updatePassword(email, password, username, token) {\n      return this.http.post(this.changePasswordUrl, {\n        email,\n        password,\n        username,\n        token\n      }, this.httpOptions);\n    }\n    /** GET checkEmailValidation from the server */\n\n\n    checkEmailValidation(token, email) {\n      const url = `${this.emailConfirmUrl}${token}${\"/\"}${email}`;\n      return this.http.get(url).pipe(map(data => data), tap(_ => this.log('fetched email confirmation')));\n    }\n    /** GET lists from the server */\n\n\n    getLists(start, limit) {\n      const url = `${this.feedUrl}${start}${\"/\"}${limit}`;\n      return this.http.get(url).pipe(map(data => data), tap(_ => this.log('fetched lists')), catchError(this.handleError('getLists', [])));\n    }\n    /** GET lists from the server */\n\n\n    getSavedLists() {\n      return this.http.get(this.savedListsUrl).pipe(map(data => data), tap(_ => this.log('fetched lists')), catchError(this.handleError('getLists', [])));\n    }\n    /** GET lists from the server */\n\n\n    getListsByChapter(chapter) {\n      const url = `${this.chapterlistUrl}${chapter}`;\n      return this.http.get(url).pipe(map(data => data), tap(_ => this.log('fetched lists')), catchError(this.handleError('getListsByChapter', [])));\n    }\n    /** GET lists from the server */\n\n\n    getListsByUser(user) {\n      const url = `${this.userlistUrl}${user}`;\n      return this.http.get(url).pipe(map(data => data.result), tap(_ => this.log('fetched lists')), catchError(this.handleError('getListsByUser', [])));\n    }\n    /** GET list by listId. Return `undefined` when listId not found */\n\n\n    getListNo404(id) {\n      const url = `${this.listUrl}${id}`;\n      return this.http.get(url).pipe(map(data => data, lists => lists[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        this.log(`${outcome} list listId=${id}`);\n      }), catchError(this.handleError(`getList listId=${id}`)));\n    }\n\n    getListNo404CommentCount(id) {\n      const url = `${this.CommentCountUrl}${id}`;\n      return this.http.get(url).pipe(map(data => data, lists => lists[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        this.log(`${outcome} list listId=${id}`);\n      }), catchError(this.handleError(`getList listId=${id}`)));\n    }\n\n    getCommentCountbyUser(username) {\n      const url = `${this.CommentsByUserCountUrl}${username}`;\n      return this.http.get(url).pipe(map(data => data, lists => lists[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        this.log(`${outcome} list listId=${username}`);\n      }), catchError(this.handleError(`getList listId=${username}`)));\n    }\n    /** GET shortlist by listId. Return `undefined` when listId not found */\n\n\n    getShortlist(id) {\n      const url = `${this.shortlistUrl}${id}`;\n      return this.http.get(url).pipe(map(data => data, lists => lists[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        this.log(`${outcome} list listId=${id}`);\n      }), catchError(this.handleError(`getList listId=${id}`)));\n    }\n    /** GET list by id. Will 404 if id not found */\n\n\n    getList(id) {\n      const url = `${this.listUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched list id=${id}`)), catchError(this.handleError(`getList id=${id}`)));\n    }\n    /* GET lists whose name contains search term */\n\n\n    searchLists(term) {\n      if (!term.trim()) {\n        // if not search term, return empty list array.\n        return of([]);\n      }\n\n      return this.http.get(`${this.searchUrl}${term}`).pipe(tap(x => x.length ? this.log(`found lists matching \"${term}\"`) : this.log(`no lists matching \"${term}\"`)), catchError(this.handleError('searchLists', [])));\n    } //////// Save methods //////////\n\n    /** POST: add a new list to the server */\n\n\n    dropList(list) {\n      console.log(list);\n      return this.http.post(this.listUrl, list, this.httpOptions).pipe(catchError(this.handleError('addList')), tap(list => this.log(`Yes lijst gemaakt! met id=${list.listId}`)));\n    }\n    /** POST: add a new list to the server */\n\n\n    editList(list) {\n      console.log(list);\n      return this.http.put(this.listUrl, list, this.httpOptions).pipe(catchError(this.handleError('addList')), tap(list => this.log(`Yes lijst gemaakt! met id=${list.listId}`)));\n    }\n    /** PUT: update the list on the server */\n\n\n    updateList(list) {\n      const url = `${this.updatelistUrl}`;\n      return this.http.put(url, list, this.httpOptions).pipe(catchError(this.handleError('updateList')), tap(_ => this.log(`updated list id=${list.id}`)));\n    }\n    /** POST: add a new list to the server */\n\n\n    createComment(comment) {\n      console.log(comment);\n      return this.http.post(this.commentUrl, comment, this.httpOptions).pipe(catchError(this.handleError('addList')), tap(list => this.log(`Yes comment gemaakt!`)));\n    }\n\n    getCommentsByItemId(id) {\n      const url = `${this.commentUrl}${id}`;\n      return this.http.get(url).pipe(map(data => data, comments => comments[0]), // returns a {0|1} element array\n      tap(h => {\n        const outcome = h ? `fetched` : `did not find`;\n        this.log(`${outcome} list listId=${id}`);\n      }), catchError(this.handleError(`getList listId=${id}`)));\n    }\n\n    addSaved(user, saved_id) {\n      const url = `${this.addSavedUrl}`;\n      this.http.put(url, JSON.stringify({\n        \"user\": user,\n        \"id\": saved_id\n      })).subscribe(data => {\n        if (data != null) {\n          console.log(\"saved succesfully\");\n        } else {\n          console.log(\"saved failed\");\n        }\n      });\n    }\n\n    removeSaved(user, saved_id) {\n      const url = `${this.removeSavedUrl}`;\n      this.http.put(url, JSON.stringify({\n        \"user\": user,\n        \"id\": saved_id\n      })).subscribe(data => {\n        if (data != null) {\n          console.log(\"saved succesfully\");\n        } else {\n          console.log(\"saved failed\");\n        }\n      });\n    }\n\n    followChapter(chapter) {\n      const url = `${this.followChapterUrl}`;\n      this.http.put(url, JSON.stringify({\n        \"chapter\": chapter\n      })).subscribe(data => {\n        if (data != null) {\n          console.log(\"followed succesfully\");\n        } else {\n          console.log(\"follow failed\");\n        }\n      });\n    }\n\n    unfollowChapter(chapter) {\n      const url = `${this.unfollowChapterUrl}`;\n      this.http.put(url, JSON.stringify({\n        \"chapter\": chapter\n      })).subscribe(data => {\n        if (data != null) {\n          console.log(\"followed succesfully\");\n        } else {\n          console.log(\"follow failed\");\n        }\n      });\n    }\n    /** GET lists from the server */\n\n\n    getChapters() {\n      return this.http.get(this.getChaptersUrl).pipe(map(data => data), tap(_ => this.log('fetched lists')), catchError(this.handleError('getChapters', [])));\n    }\n    /** DELETE: delete the list from the server */\n\n\n    deleteList(list) {\n      const id = typeof list === 'number' ? list : list.id;\n      const url = `${this.listUrl}/${id}`;\n      return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted list id=${id}`)), catchError(this.handleError('deleteList')));\n    }\n    /**\n     * Handle Http operation that failed.\n     * Let the app continue.\n     * @param operation - name of the operation that failed\n     * @param result - optional value to return as the observable result\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a ListService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`ListService: ${message}`);\n    }\n\n  }\n\n  ListService.ɵfac = function ListService_Factory(t) {\n    return new (t || ListService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  ListService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ListService,\n    factory: ListService.ɵfac,\n    providedIn: 'root'\n  });\n  return ListService;\n})();","map":null,"metadata":{},"sourceType":"module"}