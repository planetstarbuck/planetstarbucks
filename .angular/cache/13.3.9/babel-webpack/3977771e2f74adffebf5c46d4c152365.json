{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token-storage.service\";\nimport * as i2 from \"@angular/router\";\nconst TOKEN_HEADER_KEY = 'Authorization'; // for Spring Boot back-end\n\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(tokenStorageService, router) {\n      this.tokenStorageService = tokenStorageService;\n      this.router = router;\n    }\n\n    intercept(req, next) {\n      let authReq = req;\n      const token = this.tokenStorageService.getToken();\n\n      if (token != null) {\n        authReq = req.clone({\n          headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token)\n        });\n      }\n\n      return next.handle(authReq).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            this.tokenStorageService.signOut();\n            this.router.navigate(['/login']); // redirect user to the login page\n          }\n\n          if (err.status === 402) {\n            this.tokenStorageService.signOut();\n            this.router.navigate(['/register', 'check-mail']); // redirect user to the login page\n          }\n        }\n\n        return throwError(() => err);\n      }));\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.TokenStorageService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();\nexport const authInterceptorProviders = [{\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n}];","map":null,"metadata":{},"sourceType":"module"}